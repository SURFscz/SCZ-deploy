#!/bin/bash
#
# This is a convenience script to reset the local system state for choosing a different
# provider.
# We remove all active boxes and/or containers, remove dynamic networks to avoid
# leftovers blocking our static IP range and finally remove left-over machine
# definitions to avoid cached state information choosing incorrect providers or
# using stale docker-compose information.
#
# Note: use at your own risk. If your vagrant, libvirt, virtualbox or docker
# environment is anything but a simple setup, this script can potentially remove
# too much and severly hamper your endeavours.

VAGRANT=`which vagrant`
DOCKER=`which docker`
VIRSH=`which virsh`
VBOX=`which vboxmanage`

# try to destroy any active boxes
$VAGRANT destroy -f

REALLYCLEAN="no"
if [[ "x$1" = "x--force" ]]
then
    REALLYCLEAN="yes"
fi

if [[ ! "x$DOCKER" = "x" ]]
then
    # Docker: remove active containers
    for i in `$DOCKER ps -a | grep -v "^CONTAINER" | awk '{print $1}'`;do $DOCKER rm -f $i;done

    # Docker: remove networks
    NETS=`$DOCKER network ls | grep "scz" | awk '{print $1}'`
    if [[ ! "x$NETS" = "x" ]]
    then
        $DOCKER network rm $NETS
    fi

    if [[ "x$REALLYCLEAN" = "xyes" ]]
    then
        for i in `$DOCKER images -a | grep -v "^debian" | grep -v "^dramaturg" | awk '{print $3}'`;do $DOCKER rmi -f $i;done
    fi
fi

if [[ ! "x$VIRSH" = "x" ]]
then
    # Libvirt: remove networks
    NETS=`LANG=C $VIRSH net-list --all | grep "[^a-z]active" | awk '{print $1}'`
    for i in $NETS
    do
        $VIRSH net-destroy $i
    done
fi

if [[ ! "x$VBOX" = "x" ]]
then
    # Virtual box: remove networks
    NETS=`$VBOX list hostonlyifs | awk '/^Name:/ { NM=$2 } /^IPAddress:/ { print NM }'`
    for i in $NETS
    do
        $VBOX hostonlyif remove $i
    done
fi

# Vagrant: remove machine definitions and other relevant directories
rm -rf .vagrant/machines .vagrant/docker-compose

# Reset Vagrant information
$VAGRANT global-status --prune

