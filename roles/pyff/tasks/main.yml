---
- name: Ensure that packages are installed
  apt:
    name:
      - build-essential
      - git
      - xmlsec1
      - python2.7
      - python-dev
      - python-setuptools
      - python-pip
    state: present

- name: install python virtualenv
  pip:
    name: virtualenv
    executable: pip

- name: create pyFF user
  user: name=pyff shell="/bin/false" state=present

- name: Create project directory
  file: path={{ pyff_project_dir }} state=directory mode=0755 owner=pyff

- name: Create metadata directory
  file: path={{ pyff_metadata_dir }} state=directory mode=0755 owner=pyff

- block:
    # requirements.txt can be generated from virtualenv/bin/pip freeze
    - name: Generate requirements.txt.j2 from template
      template:
        src: "requirements.txt.j2"
        dest: "{{ pyff_project_dir }}/requirements.txt"

    - name: Install pyFF from requirements.txt
      pip:
        requirements: "{{ pyff_project_dir }}/requirements.txt"
        virtualenv: "{{ pyff_env_dir }}"
        virtualenv_python: python2
      notify: "restart pyff"

    - name: Create pyFF mdq configuration
      template: src=mdq.fd.j2
                dest="{{ pyff_env_dir }}/mdq.fd"
      become_method: sudo
      notify: "restart pyff"

    - name: Create local metadata directory
      file:
        path: "{{ pyff_env_dir }}/metadata"
        state: directory
        mode: 0755
        owner: pyff

    - name: Create certs directory
      file:
        path: "{{ pyff_env_dir }}/certs"
        state: directory
        mode: 0755

    - name: create self-signed Metadata Signing SSL certs
      shell: >
        openssl genrsa -out "{{ pyff_env_dir }}/certs/{{ item }}.key" 2048;
        openssl req -new -nodes -x509 -subj "/C=NL/CN={{ item }}"
        -days 3650 -key "{{ pyff_env_dir }}/certs/{{ item }}.key"
        -out "{{ pyff_env_dir }}/certs/{{ item }}.crt" -extensions v3_ca
      args:
        creates: "{{ pyff_env_dir }}/certs/{{ item }}.crt"
      with_items:
        - signing
      notify: "restart pyff"

  become: "yes"
  become_user: pyff

- name: Create pyFF systemd service
  template:
    src: "pyff.service.j2"
    dest: "/etc/systemd/system/pyff.service"
  register: pyff_systemd

- name: enable pyff
  systemd:
    name: pyff
    state: restarted
    daemon_reload: yes
    enabled: yes
  when: pyff_systemd.changed

- name: Install filebeat configuration
  template:
    src: fb_pyffd.yml.j2
    dest: /etc/filebeat/conf.d/fb_pyffd.yml
  notify: "restart filebeat"

- name: Copy rsyslog config
  copy:
    src: "rsyslog_pyffd.conf"
    dest: "/etc/rsyslog.d/pyffd.conf"
  notify: "restart rsyslog"

- name: Copy logrotate config
  copy:
    src: "logrotate_pyffd"
    dest: "/etc/logrotate.d/pyffd"

- name: set up nxginx proxy
  include: nginx.yml

# nginx needs to be restarted _now_ rather than at the end of the play
- name: flush handlers
  meta: flush_handlers

