{% set lb_http = loadbalancer|selectattr("protocol", "equalto", "http")|list %}
{% set lb_ldap = loadbalancer|selectattr("protocol", "equalto", "ldap")|list %}
global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user    haproxy
    group   haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
{% if enable_https and use_fixed_cert %}
    crt-base {{cert_dir}}
{% elif enable_https %}
    crt-base {{letsencrypt.cert_dir}}
{% endif %}


    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
{% if enable_https and haproxy.custom_dhparam %}
    ssl-dh-param-file {{haproxy.dhparam_file}}
{% elif enable_https %}
    tune.ssl.default-dh-param {{haproxy.dhparam_keysize}}
{% endif %}

defaults
    log     global
    option  dontlognull
    timeout connect 5000
    timeout client  10000
    timeout server  5000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

#--------------------------------------------------------------------
#  frontend
# -------------------------------------------------------------------
frontend fe_https
{% if enable_https %}
    bind    *:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1
    bind [::]:443 ssl crt-list /etc/haproxy/crt-list.txt transparent alpn h2,http/1.1
{% else %}
    bind    *:80 transparent
    bind [::]:80 transparent
{% endif %}

    mode    http
    option  httplog

{% if enable_https %}
    # secure cookies:
    # todo: only for satosa
    #rspirep ^(set-cookie:.*) \1;\ Secure;\ HttpOnly;\ SameSite=strict
    #rspirep ^(set-cookie:.*) \1;\ Secure;\ HttpOnly;\ SameSite=lax

    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
    # TODO: only make exception for pyff/mdq
    #http-response set-header Content-Security-Policy   "default-src 'self'; frame-src 'none'; form-action 'self'; frame-ancestors 'none'; block-all-mixed-content;"
    #http-response set-header Content-Security-Policy   "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-src 'none'; frame-ancestors 'none'; form-action 'self'; block-all-mixed-content;"

    #http-response set-header X-Frame-Options "DENY"
    #http-response set-header X-XSS-Protection "1; mode=block"
    #http-response set-header X-Content-Type-Options "nosniff"
{% endif %}

    http-request set-header X-Forwarded-For "%[src]"
    http-request set-header X-Forwarded-Host "%[req.hdr(Host)]"
    http-request set-header X-Forwarded-Port "%[dst_port]"
{% if enable_https %}
    http-request set-header X-Forwarded-Proto "https"
    http-request set-header Forwarded "for=%[src]; proto=https; by=%[dst]"
{% else %}
    http-request set-header X-Forwarded-Proto "http"
    http-request set-header Forwarded "for=%[src]; proto=http; by=%[dst]"
{% endif %}

{% if enable_ratelimit %}
    http-request track-sc0 src table proxy_rates
    http-request track-sc1 url32+src table proxy_req_rates unless { path_end .css .js .png .jpeg .gif .ico .woff2 }
    acl exceeds_limit sc_gpc0_rate(0) gt 15
    http-request sc-inc-gpc0(0) if { sc_http_req_rate(1) eq 1 } !exceeds_limit
    http-request deny deny_status 429 if exceeds_limit
{% endif %}

{% if iprange.vpn is defined %}
    acl vpn src {% for vpnname in iprange.vpn %}{{iprange.vpn[vpnname]}} {% endfor %}
{% endif %}

{% for host in lb_http %}
    acl acl_{{host.hostname}} hdr(host) -i {{host.hostname}}
{% if host.acl is defined %}
    acl acl_ip_{{host.hostname}} src 127.0.0.1 ::1 {{host.acl}}
    http-request deny if acl_{{host.hostname}} !acl_ip_{{host.hostname}}
{% endif %}
    use_backend be_{{host.hostname}} if acl_{{host.hostname}}

{% endfor %}

{% for host in lb_http %}
backend be_{{host.hostname}}
    mode    http
    cookie  SERVERID insert indirect nocache
    {% for be_server in host.backend_hosts -%}
    server  {{be_server}} {{be_server}}:{{host.backend_port}} check cookie {{be_server}}
    {% endfor %}

{% endfor %}

{% for host in lb_ldap %}
listen ldap_{{host.hostname}}_{{host.frontend_port}}
{% if enable_https %}
    bind    *:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
    bind [::]:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
{% else %}
    bind    *:{{host.frontend_port}} transparent
    bind [::]:{{host.frontend_port}} transparent
{% endif %}

    server {{host.backend_hosts[0]}} {{host.backend_hosts[0]}}:{{host.backend_port}} check weight 10 on-marked-up shutdown-backup-sessions
{% for be_server in host.backend_hosts[1:] -%}
    server {{be_server}} {{be_server}}:{{host.backend_port}} check weight 10 backup
{% endfor %}

    timeout client 900s
    timeout server 901s

    mode    tcp
    option  tcpka
    option  tcplog
    option  logasap

    option tcp-check

    tcp-check connect port {{host.backend_port}}
    tcp-check send-binary 300c0201 # LDAP bind request "<ROOT>" simple
    tcp-check send-binary 01 # message ID
    tcp-check send-binary 6007 # protocol Op
    tcp-check send-binary 0201 # bind request
    tcp-check send-binary 03 # LDAP v3
    tcp-check send-binary 04008000 # name, simple authentication
    tcp-check expect binary 0a0100 # bind response + result code: success
    tcp-check send-binary 30050201034200 # unbind request

{% endfor %}

{% if enable_ratelimit %}
backend proxy_req_rates
        stick-table type binary len 8 size 1m expire 24h store http_req_rate(24h)
backend proxy_rates
        stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s)
{% endif %}
