---
- name: Install packages
  apt:
    name: "{{ item }}"
  with_items:
    - openjdk-8-jdk
    - python-ldap

- name: Add LSC repository key
  apt_key:
    data: "{{ lookup('file', 'GPG-KEY-lsc') }}"

- name: Add LSC repository
  apt_repository:
    repo: "deb https://lsc-project.org/debian lsc main"
    update_cache: yes

- name: Ensure that packages are installed
  apt:
    name: "{{ item }}"
    install_recommends: no
  with_items:
    - lsc

- name: Generate ldif from template
  become_user: "{{ ldap_user }}"
  become: true
  template:
    src: "{{ item.src }}"
    dest: "{{ ldap_ldif_dir }}/{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: "add_client_mdb.ldif.j2", dest: "add_client_mdb.ldif" }
    - { src: "add_client_mdb_admin.ldif.j2", dest: "add_client_mdb_admin.ldif" }
    #- { src: "add_test_organization.ldif.j2", dest: "add_test_organization.ldif" }

- name: Make sure client ldap db directory exists
  file:
    path: "{{ client_ldap_dbdir }}"
    state: directory
    owner: "{{ ldap_user }}"
    group: "{{ ldap_group }}"
    mode: 0755

- name: Check if client MDB database already exists
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///
    -b 'cn=config' olcSuffix
  register: olcSuffix
  changed_when: false

- name: Set up client MDB database
  command: >
    ldapadd -Y EXTERNAL -H ldapi:///
    -f "{{ ldap_ldif_dir }}/add_client_mdb.ldif"
  when: olcSuffix.stdout.find(client_ldap.basedn) == -1

- name: Add client DB admin user
  command: >
    ldapadd -c -x -D "{{ client_ldap.binddn }}" -w "{{ client_ldap_password }}"
    -f "{{ ldap_ldif_dir }}/add_client_mdb_admin.ldif"
  register: result
  failed_when: "(result.rc not in [0, 68])"
  when: olcSuffix.stdout.find(client_ldap.basedn) == -1

- name: Configure clients
  include: client.yml
  with_items: "{{ client_ldap_clients }}"
  loop_control:
    loop_var: item_client

- name: Copy run_lsc batchfile
  template: >
    src="run_lsc_tasks.j2"
    dest="{{lsc_install_dir}}/run_lsc_tasks"
    mode=0755

- name: Copy LSC service files
  template:
    src: "{{item}}.j2"
    dest: "/etc/systemd/system/{{item}}"
  with_items:
    - lsc.service
    - lsc.timer
  notify:
    - enable lsc job
